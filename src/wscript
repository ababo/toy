SUPPORTED_ARCHS = ['x86_64', 'aarch64']
SUPPORTED_COMPS = ['gcc', 'clang']

DEFAULT_ARCH = 'x86_64'
DEFAULT_COMP = 'gcc'
DEFAULT_OPT = '3'

EMU_FLAGS = []

def options(opt):
    grp = opt.get_option_group('configure options')
    grp.add_option('-c', '--comp', action='store',
                   default=DEFAULT_COMP, dest='comp',
                   help="compiler to use [default: '%s']"%DEFAULT_COMP)
    grp.add_option('-a', '--architecture', action='store',
                   default=DEFAULT_ARCH, dest='arch',
                   help="target architecture [default: '%s']"%DEFAULT_ARCH)
    grp.add_option('-o', '--optimization', action='store',
                   default=DEFAULT_OPT, dest='opt',
                   help='code optimization [default: %s]'%DEFAULT_OPT)

    grp = opt.add_option_group('run options')
    grp.add_option('-n', '--no-kvm', action='store_true',
                   default=False, dest='no_kvm',
                   help="don't use KVM if it's available")
    grp.add_option('--sockets', action='store', dest='sockets', type=int,
                   default=1, help='number of CPU sockets [default: 1]')
    grp.add_option('--cores', action='store', dest='cores', type=int,
                   default=1, help='number of CPU cores [default: 1]')
    grp.add_option('--threads', action='store', dest='threads', type=int,
                   default=1, help='number of CPU core threads [default: 1]')
    grp.add_option('-t', '--terminal', action='store_true', default=False,
                   dest='terminal', help='run in terminal (for x86_64 only)')


def configure(cnf):
    if cnf.options.arch in SUPPORTED_ARCHS:
        cnf.env.arch = cnf.options.arch
    else:
        cnf.fatal('Supported architectures: %s' % SUPPORTED_ARCHS)
    if cnf.options.comp in SUPPORTED_COMPS:
        cnf.env.comp = cnf.options.comp
    else:
        cnf.fatal('Supported compilers: %s' % SUPPORTED_COMPS)

    cnf.env.append_value('CXXFLAGS', ['-I', cnf.path.abspath()])
    cnf.env.append_value('CXXFLAGS', ['-I', cnf.path.abspath()+'/std'])
    cnf.env.append_value('CXXFLAGS', ['-I', cnf.path.abspath()+'/third_party'])
    cnf.env.append_value('CXXFLAGS', ['-D', '__%s'%cnf.env.arch.upper()])
    cnf.env.append_value('CXXFLAGS', '-std=c++11')
    cnf.env.append_value('CXXFLAGS', '-fno-stack-protector')
    cnf.env.append_value('CXXFLAGS', '-O'+cnf.options.opt)
    cnf.env.append_value('CXXFLAGS', ['-Wall', '-Wextra',
                                      '-Wno-missing-field-initializers'])
    cnf.env.append_value('CXXFLAGS', ['-nostdinc', '-nostdinc++',
                                      '-ffreestanding'])

    cnf.env.append_value('LDFLAGS', '-nostdlib')
    cnf.env.append_value('LDFLAGS', '--build-id=none')
    cnf.env.append_value('LDFLAGS', '-T %s/%s/link.lds' %
                                    (cnf.path.abspath(), cnf.env.arch))
    cnf.env.append_value('LDFLAGS', ['-z', 'max-page-size=0x1'])

    cnf.env.EMUFLAGS = EMU_FLAGS

    cnf.recurse(cnf.env.arch)
    cnf.load('gxx')


def build(bld):
    bld.load('gxx')

    src_objs = bld.objects(source=bld.path.ant_glob('*.cc'))
    std_objs = bld.objects(source=bld.path.ant_glob('std/*.cc'))
    src_objs.post(); std_objs.post()
    bld.src_objs = [t.outputs[0] for t in src_objs.tasks] + \
                   [t.outputs[0] for t in std_objs.tasks]

    bld.recurse(bld.env.arch)


def run(run):
    smp = ['-smp', '%d,sockets=%d,cores=%d,threads=%d' % \
           (run.options.sockets * run.options.cores * run.options.threads,
            run.options.sockets, run.options.cores, run.options.threads)]
    flags = (['-no-kvm'] + smp) if run.options.no_kvm else smp
    run.env.append_value('EMUFLAGS', flags)

    build(run)
    run.recurse(run.env.arch)

    def call_emu(task):
        env = run.env.derive()
        env.kernel = task.inputs[0].abspath()

        from waflib import Utils
        cmd = [Utils.subst_vars(s, env) \
               for s in [env.EMU] + env.EMUFLAGS]

        if run.options.verbose:
            from waflib import Logs
            Logs.info(str(cmd))

        from subprocess import call
        call(cmd)

    run(always=True, rule=call_emu,
        source='%s/%s'%(run.env.arch, run.env.kernel))
